---
import { sanityClient } from "sanity:client";
import type { Review, WithContext } from "schema-dts";
import type { SanityImageSource } from "@sanity/image-url/lib/types/types";

import { urlForImage } from "@/scripts/urlForImage";

import { getFullBookReviews } from "@/ui/queries";
import { DefaultLayout } from "@/ui/layouts";

import { Seo, PortableText, ArticleHeader, Logo } from "@/ui/components";

export const getStaticPaths = async () => {
  const bookReviews = await sanityClient.fetch(getFullBookReviews);

  return bookReviews.map(
    ({
      _id,
      body,
      excerpt,
      publishedAt,
      mainImage,
      socialImage,
      slug,
      title,
    }) => {
      return {
        props: {
          _id,
          body,
          excerpt,
          publishedAt,
          mainImage,
          socialImage,
          title,
          slug,
        },
        params: { slug: slug.current },
      };
    },
  );
};

type Post = {
  _id: string;
  body: any;
  slug: {
    current: string;
  };
  category: any[];
  excerpt: string;
  mainImage: SanityImageSource;
  socialImage: SanityImageSource;
  publishedAt: Date;
  title: string;
};

type Props = Post;

const { _id, body, slug, excerpt, mainImage, socialImage, publishedAt, title } =
  Astro.props;

const schema: WithContext<Review> = {
  "@context": "https://schema.org",
  "@type": "Review",
  headline: title,
  image: urlForImage(socialImage).width(1200).height(630).url(),
  datePublished: `${publishedAt}`,
  author: [
    {
      "@type": "Person",
      name: "Tom Sturge",
      url: "https://tomsturge.com/about",
    },
  ],
};

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<script>
  document.addEventListener("astro:page-load", () => {
    const masthead = document.querySelector(".article-masthead");

    addEventListener("scroll", () => {
      if (window.scrollY > 250) {
        masthead.classList.add("visible");
      } else {
        masthead.classList.remove("visible");
      }
    });
  });
</script>

<DefaultLayout title={title} type="article">
  <Fragment slot="seo">
    <Seo
      title={title}
      description={excerpt}
      url={canonicalURL}
      author="Tom Sturge"
      publishedAt={publishedAt}
      image={urlForImage(socialImage).width(1200).height(630).url()}
    />
    <script type="application/ld+json" set:html={JSON.stringify(schema)} />
  </Fragment>

  <div class="article-masthead">
    <div class="article-masthead__container">
      <div class="article-masthead__logo">
        <Logo />
      </div>

      <p>{title}</p>
    </div>
  </div>

  <div class="wrapper">
    <ArticleHeader
      excerpt={excerpt}
      title={title}
      publishedAt={publishedAt}
      image={mainImage}
    />

    <div class="article-content">
      <PortableText value={body} />
    </div>
  </div>

  <div style="display: none;" data-document-id={_id} data-slug={slug.current}>
  </div>
</DefaultLayout>

<script>
  import { createClient } from "@supabase/supabase-js";

  const supabase = createClient(
    import.meta.env.PUBLIC_SUPABASE_URL,
    import.meta.env.PUBLIC_SUPABASE_ANON_KEY,
  );

  async function trackPageView() {
    const documentId = document
      .querySelector("[data-document-id]")
      ?.getAttribute("data-document-id");
    const slug = document
      .querySelector("[data-slug]")
      ?.getAttribute("data-slug");

    try {
      await supabase.rpc("increment_view", {
        doc_id: documentId,
        article_slug: slug,
      });
    } catch (error) {
      // Silently fail - don't log errors in production to avoid console noise
      // console.error("Failed to track page view:", error);
    }
  }

  let hasTrackedView = false;

  const handleViewTracking = () => {
    if (!hasTrackedView) {
      hasTrackedView = true;
      trackPageView();
    }
  };

  document.addEventListener("DOMContentLoaded", handleViewTracking);

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", handleViewTracking);
  } else {
    handleViewTracking();
  }
</script>

<style lang="scss">
  .article-masthead {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    transform: translateY(-80px);
    transition: all 0.5s;
    height: 70px;
    background-color: var(--colorThemeBackgroundMain);
    box-shadow: 0 0 8px 0px rgba(0, 0, 0, 0.1);
    z-index: 100;
    display: flex;
    align-items: center;

    &.visible {
      transform: translateY(0);
    }
  }

  .article-masthead {
    &__logo {
      transform: translateY(-2px);
    }

    &__container {
      max-width: var(--widthMainContainer);
      margin: 0 auto;
      display: flex;
      justify-content: flex-start;
      align-items: center;
      width: 100%;

      @media screen and (max-width: 79rem) {
        margin-right: 2rem;
        margin-left: 2rem;
        width: calc(100% - 4rem);
      }

      p {
        font-size: 1.15rem;
        margin: 0 0 0 1rem;
      }
    }

    @media screen and (max-width: 54rem) {
      display: none;
      visibility: hidden;
    }
  }

  .wrapper {
    max-width: var(--widthArticleContainer);
    margin: 0 auto;

    @media screen and (max-width: 81rem) {
      max-width: 43.75rem;
      margin: 0 auto;
    }

    @media screen and (max-width: 42rem) {
      margin: 0 2rem;
    }
  }

  .article-content {
    font-weight: 400;
    max-width: 45rem;
    margin: 0 auto;
  }

  .article-content__footer {
    position: relative;
    padding: 3rem 5rem;
    background-color: var(--colorBrandWhite);
  }
</style>

<style lang="scss" is:global>
  .article-content {
    color: var(--colorThemeTextMain);
    font-weight: 300;
    padding-bottom: 3rem;

    p {
      font-size: var(--fontSizeContentBody);
      font-family: var(--fontFamilyBody);
      line-height: 1.6;
      margin: 0 0 1rem;
      min-height: 1px;
    }

    .headingTwo:first-of-type {
      margin-top: 2rem !important;
    }

    ul,
    ol {
      padding-left: 3.5rem;

      @media screen and (max-width: 46.875rem) {
        padding-left: 2rem;
      }
    }

    ul {
      font-size: var(--fontSizeContentBody);
      list-style: circle;
      line-height: 1.4;

      li {
        margin-bottom: 0.5rem;
      }
    }

    ol {
      font-size: var(--fontSizeContentBody);
      line-height: 1.4;

      li {
        margin-bottom: 0.5rem;
      }
    }

    h1,
    h2,
    h3,
    h4,
    h5 {
      font-family: var(--fontFamilyHeading);
    }
  }
</style>
