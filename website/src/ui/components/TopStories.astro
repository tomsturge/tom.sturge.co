---
import { createClient } from "@supabase/supabase-js";
import { sanityClient } from "sanity:client";
import { ArticleList } from "./";

// Initialize Supabase client
const supabase = createClient(
  import.meta.env.PUBLIC_SUPABASE_URL,
  import.meta.env.PUBLIC_SUPABASE_ANON_KEY,
);

const { limit = 5 } = Astro.props;

// Fetch top articles by view count from Supabase, then get article data from Sanity
let topArticles = [];
try {
  // Step 1: Get top articles by view count from Supabase
  const { data: topViews, error: supabaseError } = await supabase
    .from("ts_article_views")
    .select("sanity_document_id, slug, views")
    .order("views", { ascending: false })
    .limit(limit);

  if (supabaseError) {
    throw new Error(`Supabase error: ${supabaseError.message}`);
  }

  if (topViews && topViews.length > 0) {
    // Step 2: Extract document IDs for Sanity query
    const documentIds = topViews.map((item) => item.sanity_document_id);

    // Step 3: Fetch corresponding articles from Sanity
    const sanityQuery = `*[_id in [${documentIds.map((id) => `"${id}"`).join(", ")}]]{
      _id,
      title,
      slug,
      excerpt,
      publishedAt,
      mainImage,
      "category": categories[0]-> {
        title,
        slug
      },
      author-> {
        name,
        slug
      }
    }`;

    const sanityArticles = await sanityClient.fetch(sanityQuery);

    // Step 4: Merge Sanity data with view counts, maintaining view count order
    topArticles = topViews
      .map((viewData) => {
        const sanityData = sanityArticles.find(
          (article) => article._id === viewData.sanity_document_id,
        );
        if (sanityData) {
          return {
            ...sanityData,
            views: viewData.views,
          };
        }
        return null;
      })
      .filter((article) => article !== null); // Remove any articles not found in Sanity
  }
} catch (error) {
  console.warn(
    "Could not fetch top articles data at build time:",
    error.message,
  );
  // Component will render empty state
}
---

{
  topArticles.length > 0 && (
    <ArticleList articles={topArticles} compact={true} />
  )
}
